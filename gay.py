# -*- coding: utf-8 -*-
"""Week3_0925.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gOM09ObKcEr8S7oeNS4sE34GmC8E7Ypk
"""

import numpy as np
import pandas as pd
import talib #技術指標套件 (如無需安裝)
import yfinance as yf #股價下載套件 Colab已有不用裝
import matplotlib.pyplot as plt #畫圖套件
from datetime import datetime
import statistics #統計函數套件

def drawStockSeries(df, xLabel):
    df[['close']].plot(figsize=(12,5))
    plt.title(xLabel, size=15)
    plt.legend(loc = "best", fontsize=12)
    plt.show()

def printStatisticTradingInfor(culReturn, winTime, lossTime, lastClosePrice, firstClosePrice, everyTranReturn):
    print("==========================================================================")
    print("Final return       =", format(culReturn, ".2f"))
    print("WinTime            =", winTime)
    print("LossTime           =", lossTime)
    print("Buy and Hold       =", format(lastClosePrice - firstClosePrice, ".2f"))
    print("Maximum Profit     =", format(max(everyTranReturn), ".2f"))
    print("Maximum Draw Down  =", format(min(everyTranReturn), ".2f"))
    print("Mean Profit        =", format(np.mean(everyTranReturn), ".2f"))
    print("STD Profit         =", format(np.std(everyTranReturn), ".2f"))
    print("Mean               =", format(statistics.mean(everyTranReturn), ".2f"))
    print("Variance           =", format(statistics.variance(everyTranReturn), ".2f"))
    print("Stdev              =", format(statistics.stdev(everyTranReturn), ".2f"))
    print("==========================================================================")

def drawCumulativeReturnSeries(yValues1):
    plt.figure(figsize=(10, 5))
    plt.title("Cumulative Return", fontsize=15)
    plt.xlabel("Transaction #")
    plt.ylabel("NT$")
    plt.plot(yValues1, color='blue', linewidth=2)
    plt.grid(True)
    plt.tight_layout()
    plt.show()
def MA_Strategy(target_stock, start_date, end_date, stopLoss):
    #取得股價
    df = yf.download([target_stock], start_date, end_date)
    df = df.reindex(columns = ['Open','High', 'Low', 'Close', 'Volume']) #保留所需欄位
    #更改欄位名稱
    df.rename(columns={'Open':'open', 'High':'high', 'Low':'low', 'Close':'close', 'Volume':'volume' },
    lace = True)
    #畫出股價序列圖
    drawStockSeries(df, target_stock)
    #利用talib計算移動平均線，並畫出5、10、20MA圖
    closePrices = df.iloc[:, 3].astype('float').values #收盤價
    close_sma_5 = np.round(talib.SMA(closePrices, timeperiod=5), 2)
    close_sma_10 = np.round(talib.SMA(closePrices, timeperiod=10), 2)
    close_sma_20 = np.round(talib.SMA(closePrices, timeperiod=20), 2)
    #利用matplotlib畫出移動平均線
    drawMA5_10_20Series(df.index, close_sma_5, close_sma_10, close_sma_20, target_stock)
    flage = 0 # 判斷目前是否有持股
    buyPrice = 0
    sellPrice = 0
    winTime = 0 #交易賺錢次數
    lossTime = 0 #交易虧損次數
    culReturn = 0 #第k次交易之累計報酬
    transList = [] #每次交易之累計報酬
    everyTranReturn = [] #每筆交易報酬
    tradingDetails = [] #紀錄每筆交易詳細資訊, 日期, 股價, 獲利等
    tax = 0 #交易成本
    #====================
    #買賣策略設定與交易
    for x in range(19, len(closePrices)):#每一個交易天
        if flage == 0: #狀態: 未持有股票
            #多頭排列成立
            if close_sma_5[x] > close_sma_10[x] and close_sma_10[x] > close_sma_20[x]:
                buyPrice = closePrices[x]#儲存買進價格
                tradingDetails.append(("買進日期 = ", str(df.iloc[x:x+1].index[0])[:11] , \
                "買進價格 = ", format(buyPrice, ".2f"))) #紀錄買進資訊
                tax = tax + buyPrice * 0.001425 #儲存買進手續費
                flage = 1#更新狀態
    if flage == 1:  # 狀態：持有股票
        sellPrice = closePrices[x]

        # 空頭排列成立，賣出條件
        if close_sma_5[x] < close_sma_10[x] and close_sma_10[x] < close_sma_20[x]:
            tax += sellPrice * 0.001425 + sellPrice * 0.003  # 計算交易成本（手續費 + 交易稅）

            profit = (sellPrice - buyPrice) - tax  # 計算扣除成本的報酬

            if profit > 0:  # 報酬為正
                tradingDetails.append((
                    "賣出日期 = ", str(df.iloc[x:x+1].index[0])[:11],
                    "賣出價格 = ", format(sellPrice, ".2f"),
                    "賺", format(profit, ".2f"),
                    format(profit / buyPrice, ".2%")
                ))
                winTime += 1  # 獲勝次數 +1
            else:  # 報酬為負
                tradingDetails.append((
                    "賣出日期 = ", str(df.iloc[x:x+1].index[0])[:11],
                    "賣出價格 = ", format(sellPrice, ".2f"),
                    "賠", format(profit, ".2f"),
                    format(profit / buyPrice, ".2%")
                ))
                lossTime += 1  # 失敗次數 +1

            flage = 0  # 更新成未持有股票
            everyTranReturn.append(profit)  # 儲存每筆交易獲利
            culReturn += profit  # 計算累計獲利
            transList.append(culReturn)  # 儲存每次的累計獲利
            tax = 0  # 完成交易，成本變數歸零

        # 停損判斷 (如果設定了停損且仍持有股票)
        if stopLoss > 0 and flage == 1:
            if (sellPrice - buyPrice - tax) / buyPrice < -stopLoss:  # 停損條件成立
                profit = (sellPrice - buyPrice) - tax
                tradingDetails.append((
                    "賣出日期 = ", str(df.iloc[x:x+1].index[0])[:11],
                    "賣出價格 = ", format(sellPrice, ".2f"),
                    "賺", format(profit, ".2f"),
                    format(profit / buyPrice, ".2%")
                ))
                lossTime += 1
                flage = 0
                everyTranReturn.append(profit)
                culReturn += profit
                transList.append(culReturn)
                tax = 0  # 完成交易，成本變數歸零
    #印出逐筆交易資訊，程式碼在後面第6頁
    printEveryTradingInfor(tradingDetails)
    #印出交易統計資訊，程式碼在後面第7頁
    printStatisticTradingInfor(culReturn, winTime, lossTime, closePrices[-1], closePrices[0], everyTranReturn)
    #印出累計報酬圖，程式碼在後面第8頁
    drawCumulativeReturnSeries(transList)
    #呼叫MA交易策略

def ROC_Strategy(target_stock, start_date, end_date, stopLoss):
    #取得股價
    df = yf.download([target_stock], start_date, end_date)
    df = df.reindex(columns = ['Open','High', 'Low', 'Close', 'Volume']) #保留所需欄位
    #更改欄位名稱
    df.rename(columns={'Open':'open', 'High':'high', 'Low':'low', 'Close':'close', 'Volume':'volume' },
    lace = True)
    #畫出股價序列圖
    drawStockSeries(df, target_stock)
    #利用talib計算移動平均線，並畫出5、10、20MA圖
    closePrices = df.iloc[:, 3].astype('float').values #收盤價
    ROC_10 = talib.ROC(closePrices, timeperiod=12)
    #利用matplotlib畫出移動平均線
    # drawMA5_10_20Series(df.index, close_sma_5, close_sma_10, close_sma_20, target_stock)
    flage = 0 # 判斷目前是否有持股
    buyPrice = 0
    sellPrice = 0
    winTime = 0 #交易賺錢次數
    lossTime = 0 #交易虧損次數
    culReturn = 0 #第k次交易之累計報酬
    transList = [] #每次交易之累計報酬
    everyTranReturn = [] #每筆交易報酬
    tradingDetails = [] #紀錄每筆交易詳細資訊, 日期, 股價, 獲利等
    tax = 0 #交易成本
    #====================
    #買賣策略設定與交易
    for x in range(10, len(closePrices)):#每一個交易天
        if flage == 0: #狀態: 未持有股票
            #多頭排列成立
            if ROC_10[x-1] < 0 and ROC_10[x] > 0:
                buyPrice = closePrices[x]#儲存買進價格
                tradingDetails.append(("買進日期 = ", str(df.iloc[x:x+1].index[0])[:11] , \
                "買進價格 = ", format(buyPrice, ".2f"))) #紀錄買進資訊
                tax = tax + buyPrice * 0.001425 #儲存買進手續費
                flage = 1#更新狀態
    if flage == 1:  # 狀態：持有股票
        sellPrice = closePrices[x]

        # 空頭排列成立，賣出條件
        if ROC_10[x-1] > 0 and ROC_10[x] < 0:
            tax += sellPrice * 0.001425 + sellPrice * 0.003  # 計算交易成本（手續費 + 交易稅）

            profit = (sellPrice - buyPrice) - tax  # 計算扣除成本的報酬

            if profit > 0:  # 報酬為正
                tradingDetails.append((
                    "賣出日期 = ", str(df.iloc[x:x+1].index[0])[:11],
                    "賣出價格 = ", format(sellPrice, ".2f"),
                    "賺", format(profit, ".2f"),
                    format(profit / buyPrice, ".2%")
                ))
                winTime += 1  # 獲勝次數 +1
            else:  # 報酬為負
                tradingDetails.append((
                    "賣出日期 = ", str(df.iloc[x:x+1].index[0])[:11],
                    "賣出價格 = ", format(sellPrice, ".2f"),
                    "賠", format(profit, ".2f"),
                    format(profit / buyPrice, ".2%")
                ))
                lossTime += 1  # 失敗次數 +1

            flage = 0  # 更新成未持有股票
            everyTranReturn.append(profit)  # 儲存每筆交易獲利
            culReturn += profit  # 計算累計獲利
            transList.append(culReturn)  # 儲存每次的累計獲利
            tax = 0  # 完成交易，成本變數歸零

        # 停損判斷 (如果設定了停損且仍持有股票)
        if stopLoss > 0 and flage == 1:
            if (sellPrice - buyPrice - tax) / buyPrice < -stopLoss:  # 停損條件成立
                profit = (sellPrice - buyPrice) - tax
                tradingDetails.append((
                    "賣出日期 = ", str(df.iloc[x:x+1].index[0])[:11],
                    "賣出價格 = ", format(sellPrice, ".2f"),
                    "賺", format(profit, ".2f"),
                    format(profit / buyPrice, ".2%")
                ))
                lossTime += 1
                flage = 0
                everyTranReturn.append(profit)
                culReturn += profit
                transList.append(culReturn)
                tax = 0  # 完成交易，成本變數歸零
    #印出逐筆交易資訊，程式碼在後面第6頁
    printEveryTradingInfor(tradingDetails)
    #印出交易統計資訊，程式碼在後面第7頁
    printStatisticTradingInfor(culReturn, winTime, lossTime, closePrices[-1], closePrices[0], everyTranReturn)
    #印出累計報酬圖，程式碼在後面第8頁
    drawCumulativeReturnSeries(transList)
    #呼叫MA交易策略